-- generated by pyha 0.0.7
library ieee;
    use ieee.std_logic_1164.all;
    use ieee.numeric_std.all;
    use ieee.fixed_float_types.all;
    use ieee.fixed_pkg.all;
    use ieee.math_real.all;

library work;
    use work.complex_pkg.all;
    use work.PyhaUtil.all;
    use work.Typedefs.all;
    use work.all;


-- :param window_len: Size of the moving average window, must be power of 2 and >= 2
-- :param dtype: internal storage type, Sfix/Complex
package MovingAverage_0 is
    type self_t is record
        mem: Typedefs.complex_t_13downto_48_list_t(0 to 127);
        sum: complex_t(1 downto -48);
    end record;
    type MovingAverage_0_self_t_list_t is array (natural range <>) of MovingAverage_0.self_t;

    type self_t_const is record
        WINDOW_LEN: integer;
        BIT_GROWTH: integer;
        DELAY: integer;
    end record;
    type MovingAverage_0_self_t_const_list_t_const is array (natural range <>) of MovingAverage_0.self_t_const;

    procedure main(self:in self_t; self_next:inout self_t; constant self_const: self_t_const; new_sample: complex_t(1 downto -34); ret_0:out complex_t(1 downto -34));
    function MovingAverage(mem: Typedefs.complex_t_13downto_48_list_t(0 to 127); sum: complex_t(1 downto -48)) return self_t;
end package;

package body MovingAverage_0 is
    procedure main(self:in self_t; self_next:inout self_t; constant self_const: self_t_const; new_sample: complex_t(1 downto -34); ret_0:out complex_t(1 downto -34)) is

        variable scaled: complex_t(-13 downto -48);
    begin
        -- add new element to shift register
        scaled := resize(scalb(new_sample, -self_const.BIT_GROWTH), -7, -24, fixed_saturate, fixed_round);
        self_next.mem := scaled & self.mem(0 to self.mem'high-1);

        self_next.sum := resize(self.sum + scaled - self.mem(self.mem'length-1), 0, -24, fixed_wrap, fixed_truncate);
        ret_0 := resize(self.sum, 0, -17, overflow_style=>fixed_wrap, round_style=>fixed_truncate);
        return;
    end procedure;

    function MovingAverage(mem: Typedefs.complex_t_13downto_48_list_t(0 to 127); sum: complex_t(1 downto -48)) return self_t is
        -- limited constructor
        variable self: self_t;
    begin
        self.mem := mem;
        self.sum := sum;
        return self;
    end function;
end package body;
