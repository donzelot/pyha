-- generated by pyha 0.0.7
library ieee;
    use ieee.std_logic_1164.all;
    use ieee.numeric_std.all;
    use ieee.fixed_pkg.all;
    use ieee.math_real.all;

library work;
    use work.complex_pkg.all;
    use work.PyhaUtil.all;
    use work.Typedefs.all;
    use work.all;

entity  top is
    port (
        clk, rst_n: in std_logic;

        -- look #153 if you want enable
        -- enable: in std_logic;

        -- inputs
        in0: in std_logic_vector(35 downto 0);

        -- outputs
        out0: out std_logic_vector(35 downto 0)
    );
end entity;

architecture arch of top is
    -- make reset procedure callable
    function init_regs return DCRemoval_0.self_t is
        variable self: DCRemoval_0.self_t;
    begin
            self.mavg(0).mem := (Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24));
            self.mavg(0).sum := Complex(0.0, 0.0, 0, -24);
            self.mavg(1).mem := (Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24));
            self.mavg(1).sum := Complex(0.0, 0.0, 0, -24);
            self.mavg(2).mem := (Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24));
            self.mavg(2).sum := Complex(0.0, 0.0, 0, -24);
            self.mavg(3).mem := (Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24), Complex(0.0, 0.0, -7, -24));
            self.mavg(3).sum := Complex(0.0, 0.0, 0, -24);
            self.y := Complex(0.0, 0.0, 0, -17);
          return self;
    end function;

    function init_constants return DCRemoval_0.self_t_const is
        variable self: DCRemoval_0.self_t_const;
    begin
            self.mavg(0).WINDOW_LEN := 128;
            self.mavg(0).BIT_GROWTH := 7;
            self.mavg(0).DELAY := 1;
            self.mavg(1).WINDOW_LEN := 128;
            self.mavg(1).BIT_GROWTH := 7;
            self.mavg(1).DELAY := 1;
            self.mavg(2).WINDOW_LEN := 128;
            self.mavg(2).BIT_GROWTH := 7;
            self.mavg(2).DELAY := 1;
            self.mavg(3).WINDOW_LEN := 128;
            self.mavg(3).BIT_GROWTH := 7;
            self.mavg(3).DELAY := 1;
            self.DELAY := 1;
          return self;
    end function;

    signal self: DCRemoval_0.self_t := init_regs;
    constant self_const: DCRemoval_0.self_t_const := init_constants;
begin
    process(clk, rst_n)
        variable self_next: DCRemoval_0.self_t;
        -- input variables
        variable var_in0: complex_t(1 downto -34);

        --output variables
        variable var_out0: complex_t(1 downto -34);

    begin
        self_next := self;

        --convert slv to normal types
        var_in0 := Complex(in0(35 downto 0), 0, -17);

        --call the main entry
        DCRemoval_0.main(self, self_next, self_const, var_in0, ret_0=>var_out0);

        --convert normal types to slv
        out0(35 downto 0) <= to_slv(var_out0);


        if (rst_n = '0') then
            self <= init_regs;

        elsif rising_edge(clk) then
            -- look #153 if you want enable
            --if enable = '1' then
                self <= self_next;


            --end if;
        end if;

    end process;
end architecture;