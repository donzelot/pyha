-- generated by pyha 0.0.0 at 2017-03-01 00:53:23
library ieee;
    use ieee.std_logic_1164.all;
    use ieee.numeric_std.all;
    use ieee.fixed_float_types.all;
    use ieee.fixed_pkg.all;
    use ieee.math_real.all;

library work;
    use work.ComplexTypes.all;
    use work.PyhaUtil.all;
    use work.all;

-- (x + yj)(u + vj) = (xu - yv) + (xv + yu)j
package ComplexMultiply_0 is



    type next_t is record
        real_xu: sfixed(0 downto -17);
        real_yv: sfixed(0 downto -17);
        imag_xv: sfixed(0 downto -17);
        imag_yu: sfixed(0 downto -17);
        outreg: complex_sfix0_17;
    end record;

    type self_t is record
        -- constants
        \_delay\: integer;

        real_xu: sfixed(0 downto -17);
        real_yv: sfixed(0 downto -17);
        imag_xv: sfixed(0 downto -17);
        imag_yu: sfixed(0 downto -17);
        outreg: complex_sfix0_17;
        \next\: next_t;
    end record;

    procedure \_pyha_constants_self\(self: inout self_t);

    procedure \_pyha_reset_self\(self: inout self_t);

    procedure \_pyha_update_self\(self: inout self_t);


    procedure main(self:inout self_t; a: complex_sfix0_17; b: complex_sfix0_17; ret_0:out complex_sfix0_17);
end package;

package body ComplexMultiply_0 is
    procedure \_pyha_constants_self\(self: inout self_t) is
    begin
        self.\_delay\ := 2;

    end procedure;

    procedure \_pyha_reset_self\(self: inout self_t) is
    begin
        self.\next\.real_xu := Sfix(0.0, 0, -17);
        self.\next\.real_yv := Sfix(0.0, 0, -17);
        self.\next\.imag_xv := Sfix(0.0, 0, -17);
        self.\next\.imag_yu := Sfix(0.0, 0, -17);
        self.\next\.outreg := (real=>Sfix(0.0, 0, -17), imag=>Sfix(0.0, 0, -17));
        \_pyha_update_self\(self);
    end procedure;

    procedure \_pyha_update_self\(self: inout self_t) is
    begin
        self.real_xu := self.\next\.real_xu;
        self.real_yv := self.\next\.real_yv;
        self.imag_xv := self.\next\.imag_xv;
        self.imag_yu := self.\next\.imag_yu;
        self.outreg := self.\next\.outreg;
        \_pyha_constants_self\(self);
    end procedure;




    procedure main(self:inout self_t; a: complex_sfix0_17; b: complex_sfix0_17; ret_0:out complex_sfix0_17) is

    begin
        -- assert a.has_same_bounds(b)
        -- self.next.real_xu = a.real * b.real
        -- self.next.real_yv = a.imag * b.imag
        -- self.next.outreg.real = resize(self.real_xu - self.real_yv,
        --                                size_res=a.real, round_style=fixed_truncate)
        --
        -- self.next.imag_xv = a.real * b.imag
        -- self.next.imag_yu = a.imag * b.real
        -- self.next.outreg.imag = resize(self.imag_xv + self.imag_yu,
        --                                size_res=a.imag, round_style=fixed_truncate)

        self.\next\.real_xu := resize(a.real * b.real, size_res=>a.real, round_style=>fixed_truncate);
        self.\next\.real_yv := resize(a.imag * b.imag, size_res=>a.real, round_style=>fixed_truncate);
        self.\next\.outreg.real := resize(self.real_xu - self.real_yv, size_res=>a.real, round_style=>fixed_truncate);

        self.\next\.imag_xv := resize(a.real * b.imag, size_res=>a.real, round_style=>fixed_truncate);
        self.\next\.imag_yu := resize(a.imag * b.real, size_res=>a.real, round_style=>fixed_truncate);
        self.\next\.outreg.imag := resize(self.imag_xv + self.imag_yu, size_res=>a.real, round_style=>fixed_truncate);

        ret_0 := self.outreg;
        return;
    end procedure;
end package body;
