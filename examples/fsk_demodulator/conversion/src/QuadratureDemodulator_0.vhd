-- generated by pyha 0.0.0 at 2017-03-01 00:53:23
library ieee;
    use ieee.std_logic_1164.all;
    use ieee.numeric_std.all;
    use ieee.fixed_float_types.all;
    use ieee.fixed_pkg.all;
    use ieee.math_real.all;

library work;
    use work.ComplexTypes.all;
    use work.PyhaUtil.all;
    use work.all;

-- http://gnuradio.org/doc/doxygen-3.7/classgr_1_1analog_1_1quadrature__demod__cf.html#details
-- :param gain: inverse of tx sensitivity. In RTL this is further multiplied by PI, because CORDIC returns angle in -1 to 1 range.
package QuadratureDemodulator_0 is



    type next_t is record
        conjugate: Conjugate_0.self_t;
        complex_mult: ComplexMultiply_0.self_t;
        angle: Angle_0.self_t;
        \out\: sfixed(0 downto -17);
    end record;

    type self_t is record
        -- constants
        gain_sfix: sfixed(3 downto -14);
        \_delay\: integer;

        conjugate: Conjugate_0.self_t;
        complex_mult: ComplexMultiply_0.self_t;
        angle: Angle_0.self_t;
        \out\: sfixed(0 downto -17);
        \next\: next_t;
    end record;

    procedure \_pyha_constants_self\(self: inout self_t);

    procedure \_pyha_reset_self\(self: inout self_t);

    procedure \_pyha_update_self\(self: inout self_t);

    -- :param c: baseband
    -- :type c: ComplexSfix
    -- :return: demodulated signal
    -- :rtype: Sfix
    procedure main(self:inout self_t; c: complex_sfix0_17; ret_0:out sfixed(0 downto -17));
end package;

package body QuadratureDemodulator_0 is
    procedure \_pyha_constants_self\(self: inout self_t) is
    begin
        self.gain_sfix := Sfix(0.68209261325098, 3, -14);
        self.\_delay\ := 19;
        Conjugate_0.\_pyha_constants_self\(self.conjugate);
        ComplexMultiply_0.\_pyha_constants_self\(self.complex_mult);
        Angle_0.\_pyha_constants_self\(self.angle);
    end procedure;

    procedure \_pyha_reset_self\(self: inout self_t) is
    begin
        Conjugate_0.\_pyha_reset_self\(self.conjugate);
        ComplexMultiply_0.\_pyha_reset_self\(self.complex_mult);
        Angle_0.\_pyha_reset_self\(self.angle);
        self.\next\.\out\ := Sfix(0.0, 0, -17);
        \_pyha_update_self\(self);
    end procedure;

    procedure \_pyha_update_self\(self: inout self_t) is
    begin
        Conjugate_0.\_pyha_update_self\(self.conjugate);
        ComplexMultiply_0.\_pyha_update_self\(self.complex_mult);
        Angle_0.\_pyha_update_self\(self.angle);
        self.\out\ := self.\next\.\out\;
        \_pyha_constants_self\(self);
    end procedure;

    -- :param c: baseband
    -- :type c: ComplexSfix
    -- :return: demodulated signal
    -- :rtype: Sfix
    procedure main(self:inout self_t; c: complex_sfix0_17; ret_0:out sfixed(0 downto -17)) is
        variable fix_gain: sfixed(0 downto -17);
        variable conj: complex_sfix0_17;
        variable mult: complex_sfix0_17;
        variable angle: sfixed(0 downto -17);
    begin
        Conjugate_0.main(self.conjugate, c, ret_0=>conj);
        ComplexMultiply_0.main(self.complex_mult, c, conj, ret_0=>mult);
        Angle_0.main(self.angle, mult, ret_0=>angle);
        fix_gain := resize(self.gain_sfix * angle, c.real, round_style=>fixed_truncate);

        -- output register
        self.\next\.\out\ := fix_gain;
        ret_0 := self.\out\;
        return;
    end procedure;
end package body;
