-- generated by pyha 0.0.0 at 2017-02-28 19:15:14
library ieee;
    use ieee.std_logic_1164.all;
    use ieee.numeric_std.all;
    use ieee.fixed_float_types.all;
    use ieee.fixed_pkg.all;
    use ieee.math_real.all;

library work;
    use work.ComplexTypes.all;
    use work.PyhaUtil.all;
    use work.all;


package BigFir_0 is



    type next_t is record
        out_resized: sfixed(0 downto -17);
        coef_f: sfixed(0 downto -17);
    end record;

    type self_t is record
        -- constants
        \_delay\: integer;

        out_resized: sfixed(0 downto -17);
        coef_f: sfixed(0 downto -17);
        \next\: next_t;
    end record;

    procedure \_pyha_constants_self\(self: inout self_t);

    procedure \_pyha_reset_self\(self: inout self_t);

    procedure \_pyha_update_self\(self: inout self_t);


    procedure main(self:inout self_t; input: sfixed(0 downto -17); ret_0:out sfixed(0 downto -17));
end package;

package body BigFir_0 is
    procedure \_pyha_constants_self\(self: inout self_t) is
    begin
        self.\_delay\ := 1;

    end procedure;

    procedure \_pyha_reset_self\(self: inout self_t) is
    begin
        self.\next\.out_resized := Sfix(0.0, 0, -17);
        self.\next\.coef_f := Sfix(0.5, 0, -17);
        \_pyha_update_self\(self);
    end procedure;

    procedure \_pyha_update_self\(self: inout self_t) is
    begin
        self.out_resized := self.\next\.out_resized;
        self.coef_f := self.\next\.coef_f;
        \_pyha_constants_self\(self);
    end procedure;


    procedure main(self:inout self_t; input: sfixed(0 downto -17); ret_0:out sfixed(0 downto -17)) is

    begin
        -- this will also infer saturation logic
        -- for registers you always assign to self.next
        self.\next\.out_resized := resize(input * self.coef_f, size_res=>input, round_style=>fixed_truncate);

        ret_0 := self.out_resized;
        return;
    end procedure;
end package body;
