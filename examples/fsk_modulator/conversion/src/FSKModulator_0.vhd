-- generated by pyha 0.0.0 at 2017-03-01 01:09:34
library ieee;
    use ieee.std_logic_1164.all;
    use ieee.numeric_std.all;
    use ieee.fixed_float_types.all;
    use ieee.fixed_pkg.all;
    use ieee.math_real.all;

library work;
    use work.ComplexTypes.all;
    use work.PyhaUtil.all;
    use work.all;

-- Frequency shift-keying modulator. It takes in bits and outputs complex stream, that could be fed
-- into SDR. Implementation uses NCO component, that in turn uses CORDIC algorithm for carrier generation.
-- :param deviation: From center frequency
-- :param fs: Sample rate
package FSKModulator_0 is



    type next_t is record
        nco: NCO_0.self_t;
    end record;

    type self_t is record
        -- constants
        sensitivity_pos: sfixed(0 downto -17);
        sensitivity_neg: sfixed(0 downto -17);
        \_delay\: integer;

        nco: NCO_0.self_t;
        \next\: next_t;
    end record;

    procedure \_pyha_constants_self\(self: inout self_t);

    procedure \_pyha_reset_self\(self: inout self_t);

    procedure \_pyha_update_self\(self: inout self_t);

    -- :param symbol: Bit to modulate
    -- :return: Modulated signal in baseband
    -- :rtype: ComplexSfix
    procedure main(self:inout self_t; symbol: boolean; ret_0:out complex_sfix0_17);
end package;

package body FSKModulator_0 is
    procedure \_pyha_constants_self\(self: inout self_t) is
    begin
        self.sensitivity_pos := Sfix(0.4666666666666666, 0, -17);
        self.sensitivity_neg := Sfix(-0.4666666666666666, 0, -17);
        self.\_delay\ := 18;
        NCO_0.\_pyha_constants_self\(self.nco);
    end procedure;

    procedure \_pyha_reset_self\(self: inout self_t) is
    begin
        NCO_0.\_pyha_reset_self\(self.nco);
        \_pyha_update_self\(self);
    end procedure;

    procedure \_pyha_update_self\(self: inout self_t) is
    begin
        NCO_0.\_pyha_update_self\(self.nco);
        \_pyha_constants_self\(self);
    end procedure;



    -- todo: this should handle 'sps', but needs upsamper

    -- :param symbol: Bit to modulate
    -- :return: Modulated signal in baseband
    -- :rtype: ComplexSfix
    procedure main(self:inout self_t; symbol: boolean; ret_0:out complex_sfix0_17) is
        variable phase_step: sfixed(0 downto -17);
        variable cout: complex_sfix0_17;
    begin
        if symbol then
            phase_step := self.sensitivity_pos;
        else
            phase_step := self.sensitivity_neg;

        end if;
        NCO_0.main(self.nco, phase_step, ret_0=>cout);
        ret_0 := cout;
        return;
    end procedure;
end package body;
