-- generated by pyha 0.0.0 at 2017-03-01 01:09:36
library ieee;
    use ieee.std_logic_1164.all;
    use ieee.numeric_std.all;
    use ieee.fixed_pkg.all;
    use ieee.math_real.all;

library work;
    use work.PyhaUtil.all;
    use work.ComplexTypes.all;
    use work.all;

entity  top is
    port (
        clk, rst_n, enable: in std_logic;

        -- inputs
        in0: in std_logic;

        -- outputs
        out0: out std_logic_vector(35 downto 0)
    );
end entity;

architecture arch of top is
begin
    process(clk, rst_n)
        variable self: FSKModulator_0.self_t;
        -- input variables
        variable var_in0: boolean;

        --output variables
        variable var_out0: complex_sfix0_17;
    begin
    if (not rst_n) then
        FSKModulator_0.\_pyha_reset_self\(self);
    elsif rising_edge(clk) then
        if enable then
            --convert slv to normal types
            var_in0 := logic_to_bool(in0);

            --call the main entry
            -- without this Quartus wont honor constants
            FSKModulator_0.\_pyha_constants_self\(self);
            FSKModulator_0.main(self, var_in0, ret_0=>var_out0);
            FSKModulator_0.\_pyha_update_self\(self);

            --convert normal types to slv
            out0 <= to_slv(var_out0.real) & to_slv(var_out0.imag);
        end if;
      end if;

    end process;
end architecture;